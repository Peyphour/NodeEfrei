#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app')
const db = require('../db')
const debug = require('debug')('nodeefrei:server')
const http = require('http')

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

const io = require('socket.io')(server)
io.on('connection', function (socket) {
  socket.on('login', (msg) => {
    debug(`got token ${msg}`)
    db.getUserByToken(msg, (err, row) => {
      socket.emit('user info', row)
    })
  })
  socket.on('channels-request', () => {
    db.getChannels((err, rows) => {
      socket.emit('channels', rows)
    })
  })
  socket.on('channel-messages-request', (msg) => {
    db.getMessagesForChannel(msg.channel, (err, rows) => {
      if (err || !rows) {
        console.log(err)
        return
      }
      for (let message of rows) {
        socket.emit('channel-message', {
          channel: message.channel,
          content: message.content,
          user: message.user
        })
      }
    })
  })
  socket.on('channel-message', (msg) => {
    db.getUserByToken(msg.token, (err, user) => {
      if (err || !user) {
        return
      }
      db.getChannel(msg.channel, (err, row) => {
        if (err || !row) {
          debug('Can\'t create mesage')
          return
        }
        debug(`Creating new message ${msg.content} for user ${user.username} in channel ${msg.channel}`)
        db.createMessage(user.username, msg.channel, msg.content)
        io.emit('channel-message', {
          channel: msg.channel,
          content: msg.content,
          user: user.username
        })
      })
    })
  })
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
